import logging
import asyncio
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import pytz
import json
import os
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from telegram import Update, ReplyKeyboardMarkup

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OWNER_CHAT_ID = 734782204
SUBSCRIBERS_FILE = 'subscribers.json'
LOCAL_TZ = pytz.timezone("Europe/Moscow")  # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ ===
def load_subscribers():
    if os.path.exists(SUBSCRIBERS_FILE):
        with open(SUBSCRIBERS_FILE, 'r') as f:
            return set(json.load(f))
    return set()

def save_subscribers(subscribers):
    with open(SUBSCRIBERS_FILE, 'w') as f:
        json.dump(list(subscribers), f)

# === –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç ===
def parse_date(date_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω."""
    try:
        date_str = date_str.split("‚Äì")[0].split("-")[0].strip()
        return datetime.strptime(date_str, "%d %B %Y").date()
    except Exception:
        try:
            dt = datetime.strptime(date_str, "%B %Y")
            return dt.replace(day=1).date()
        except Exception:
            return None

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
def get_upcoming_tournament_tomorrow():
    try:
        url = "https://en.wikipedia.org/wiki/2025%E2%80%9326_snooker_season"
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        tomorrow = datetime.now(LOCAL_TZ).date() + timedelta(days=1)

        tables = soup.find_all('table', {'class': 'wikitable'})
        target_table = None
        for table in tables:
            header = table.find('tr')
            headers = [th.get_text(strip=True) for th in header.find_all(['th', 'td'])]
            if {'Start', 'Finish', 'Tournament'}.issubset(set(headers)):
                target_table = table
                break

        if not target_table:
            return None

        rows = target_table.find_all('tr')[1:]
        for row in rows:
            cols = row.find_all('td')
            if len(cols) >= 3:
                start_date = parse_date(cols[0].get_text(strip=True))
                if start_date == tomorrow:
                    tournament = cols[2].get_text(strip=True)
                    return f"üé± –ó–∞–≤—Ç—Ä–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç —á–µ–º–ø–∏–æ–Ω–∞—Ç:\nüèÜ {tournament}\nüìÖ {cols[0].get_text(strip=True)}"

        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        return None

def get_schedule():
    try:
        url = "https://en.wikipedia.org/wiki/2025%E2%80%9326_snooker_season"
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        tables = soup.find_all('table', {'class': 'wikitable'})
        target_table = None
        for table in tables:
            header = table.find('tr')
            headers = [th.get_text(strip=True) for th in header.find_all(['th', 'td'])]
            if {'Start', 'Finish', 'Tournament', 'Venue', 'Winner', 'Runner-up', 'Score'}.issubset(set(headers)):
                target_table = table
                break

        if not target_table:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–æ–≤."

        rows = target_table.find_all('tr')[1:]
        results = []
        for row in rows:
            cols = row.find_all('td')
            if len(cols) >= 7:
                start = cols[0].get_text(strip=True)
                finish = cols[1].get_text(strip=True)
                tournament = cols[2].get_text(strip=True)
                venue = cols[3].get_text(strip=True)
                winner = cols[4].get_text(strip=True)
                runner_up = cols[5].get_text(strip=True)
                score = cols[6].get_text(strip=True)
                results.append(f"üìÖ {start} ‚Äî {finish}\nüèÜ {tournament}\nüìç {venue}\nü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}\nü•à –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {runner_up}\n‚öîÔ∏è –°—á—ë—Ç: {score}")

        if not results:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö."

        return "\n\n".join(results)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}"

def get_world_ranking():
    try:
        url = "https://en.wikipedia.org/wiki/Snooker_world_rankings"
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        tables = soup.find_all('table', {'class': 'wikitable'})
        ranking_table = None
        for table in tables:
            headers = [th.text.strip() for th in table.find_all('th')]
            if 'Points' in headers and 'Player' in headers:
                ranking_table = table
                break

        if not ranking_table:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–∞."

        rows = ranking_table.find_all('tr')[1:]
        results = []
        for row in rows:
            cols = row.find_all(['td', 'th'])
            if len(cols) >= 3:
                position = cols[0].text.strip()
                player = cols[1].text.strip()
                points = cols[2].text.strip()
                results.append(f"{position}. {player} ‚Äî {points} –æ—á–∫–æ–≤")

        if not results:
            return "–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç."

        return "üèÜ –ú–∏—Ä–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–Ω—É–∫–µ—Ä–∞:\n\n" + "\n".join(results)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}"

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def send_commands_menu(update: Update):
    keyboard = [
        ["/start", "/unsubscribe"],
        ["/schedule", "/ranking"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_chat.id)
    subscribers = load_subscribers()
    message_text = ("‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ –Ω–∞—á–∞–ª–∞, –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 21:00.\n\n")
    if user_id not in subscribers:
        subscribers.add(user_id)
        save_subscribers(subscribers)
        await update.message.reply_text("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω—É–∫–µ—Ä–µ.\n\n" + message_text)
    else:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω.\n\n" + message_text)
    await send_commands_menu(update)

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_chat.id)
    subscribers = load_subscribers()
    if user_id in subscribers:
        subscribers.remove(user_id)
        save_subscribers(subscribers)
        await update.message.reply_text("‚úÖ –¢—ã –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–Ω—É–∫–µ—Ä–µ.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –¢—ã –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω.")
    await send_commands_menu(update)

async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤...")
    data = get_schedule()
    if len(data) > 3900:
        data = data[:3900] + "\n\n...–∏ –µ—â—ë —Ç—É—Ä–Ω–∏—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏."
    await update.message.reply_text(data)
    await send_commands_menu(update)

async def ranking_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é —Ç–µ–∫—É—â–∏–π –º–∏—Ä–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥...")
    data = get_world_ranking()
    max_len = 4000
    if len(data) <= max_len:
        await update.message.reply_text(data)
    else:
        parts = []
        current = ""
        for line in data.split("\n"):
            if len(current) + len(line) + 1 > max_len:
                parts.append(current)
                current = ""
            current += line + "\n"
        if current:
            parts.append(current)
        for part in parts:
            await update.message.reply_text(part)
    await update.message.reply_text("–∞ —Å–∫–æ–ª—å–∫–æ —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥?)")
    await send_commands_menu(update)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_chat.id)
    user = update.effective_user
    text = update.message.text

    if user.username:
        user_name = f"@{user.username}"
    else:
        user_name = user.first_name or "Unknown"
        if user.last_name:
            user_name += f" {user.last_name}"

    with open('user_replies.txt', 'a', encoding='utf-8') as f:
        f.write(f"{user_id} ({user_name}): {text}\n")

    await context.bot.send_message(
        chat_id=OWNER_CHAT_ID,
        text=f"–û—Ç–≤–µ—Ç –æ—Ç {user_name} (id: {user_id}):\n{text}"
    )

    await update.message.reply_text("—á–µ—Ç –º–∞–ª–æ")
    await send_commands_menu(update)

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
async def scheduled_check(application):
    text = get_upcoming_tournament_tomorrow()
    if not text:
        return
    subscribers = load_subscribers()
    for chat_id in subscribers:
        try:
            await application.bot.send_message(chat_id=chat_id, text=text)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {chat_id}")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")

async def scheduler(application):
    sent_today = False
    while True:
        now = datetime.now(LOCAL_TZ)
        if now.hour == 21 and not sent_today:
            await scheduled_check(application)
            sent_today = True
        elif now.hour != 21:
            sent_today = False
        await asyncio.sleep(300)

async def on_startup(app):
    asyncio.create_task(scheduler(app))

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(on_startup).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))
    app.add_handler(CommandHandler("schedule", schedule_command))
    app.add_handler(CommandHandler("ranking", ranking_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler))
    app.run_polling()
